package offer;

/**
 * 输入一个复杂链表（每个节点中有节点值，以及两个指针，
 * 一个指向下一个节点，另一个特殊指针指向任意一个节点），
 * 返回结果为复制后复杂链表的head。
 * （注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）
 * @author zhouliang
 *
 */
class test26 {
    public RandomListNode Clone(RandomListNode pHead)
    {
        if(pHead == null){
        	return null;
        }
        RandomListNode pNode = pHead;
        while(pNode!=null){
        	RandomListNode temp = new RandomListNode(pNode.label);     	
        	RandomListNode next = pNode.next;       	
        	pNode.next = temp;     
        	temp.next = next;
        	pNode = next;
        }
        
        RandomListNode pRand = pHead;
        while(pRand!=null){
        	if(pRand.random!=null){
        		RandomListNode rand  = pRand.random;
            	pRand.next.random = rand.next;
        	}
        	pRand = pRand.next.next;
        }
        RandomListNode pCur = pHead;
        RandomListNode result = pHead.next;
        RandomListNode cur = result;
        while(pCur!=null){
    		pCur.next = pCur.next.next;
    		if(pCur.next!=null){
    			cur.next = cur.next.next;
    		}
    		cur = cur.next;
    		pCur = pCur.next;
        }
    	return result;
    }
}
